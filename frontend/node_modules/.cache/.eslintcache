[{"C:\\Users\\chris\\Documents\\DjangoProjects\\Projects\\Triviolivia\\frontend\\src\\index.js":"1","C:\\Users\\chris\\Documents\\DjangoProjects\\Projects\\Triviolivia\\frontend\\src\\App.js":"2","C:\\Users\\chris\\Documents\\DjangoProjects\\Projects\\Triviolivia\\frontend\\src\\reportWebVitals.js":"3"},{"size":596,"mtime":1678028693886,"results":"4","hashOfConfig":"5"},{"size":3440,"mtime":1678032395825,"results":"6","hashOfConfig":"5"},{"size":375,"mtime":1678028693887,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"1spr15v",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"C:\\Users\\chris\\Documents\\DjangoProjects\\Projects\\Triviolivia\\frontend\\src\\index.js",[],[],[],"C:\\Users\\chris\\Documents\\DjangoProjects\\Projects\\Triviolivia\\frontend\\src\\App.js",["19"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const [question, setQuestion] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [difficulties, setDifficulties] = useState([]);\r\n  const [eras, setEras] = useState([]);\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  const [selectedDifficulty, setSelectedDifficulty] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const response = await axios.get('api/questions/')\r\n\r\n      setQuestion(response.data);\r\n      console.log(response.data);\r\n    \r\n\r\n    axios.get('api/categories/')\r\n      .then(response => {\r\n        setCategories(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n\r\n    axios.get('api/difficulties/')\r\n      .then(response => {\r\n        setDifficulties(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n\r\n    axios.get('api/eras/')\r\n      .then(response => {\r\n        setEras(response.data);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n    \r\n    }\r\n    fetchData();\r\n  }, []);\r\n  \r\n    const handleEraChange = (event) => {\r\n      const selectedEras = Array.from(event.target.selectedOptions, option => option.value);\r\n      // Do something with the selected eras\r\n    };\r\n\r\n    const handleCategoryChange = (event) => {\r\n      const categoryId = event.target.value;\r\n      setSelectedCategory(categoryId);\r\n    };\r\n  \r\n    const handleDifficultyChange = (event) => {\r\n      const difficultyId = event.target.value;\r\n      setSelectedDifficulty(difficultyId);\r\n    };\r\n\r\n    const handleNewQuestion = async () => {\r\n      const response = await axios.get('api/questions/', {\r\n        params: {\r\n          category: selectedCategory,\r\n          difficulty: selectedDifficulty,\r\n        },\r\n      });\r\n      setQuestion(response.data)};\r\n\r\n  return (\r\n    <div>\r\n      {question.map((question) => (\r\n        <div key={question.id}>\r\n          <h2>{question.text}</h2>\r\n          <p>{question.answer}</p>\r\n          <p>Category: {question.category_name}</p>\r\n          <p>Difficulty: {question.difficulty_name}</p>\r\n          <p>Eras: {question.eras}</p>\r\n        </div>\r\n      ))}\r\n      <div>\r\n        <label htmlFor=\"category\">Select a category:</label>\r\n        <select name=\"category\" id=\"category\" onChange={handleCategoryChange}>\r\n          {categories.map(category => (\r\n            <option key={category.id} value={category.id}>\r\n              {category.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <br></br>\r\n        <label htmlFor=\"difficulty\">Select a difficulty:</label>\r\n      <select name=\"difficulty\" id=\"difficulty\" onChange={handleDifficultyChange}>\r\n        {difficulties.map(difficulty => (\r\n          <option key={difficulty.id} value={difficulty.id}>\r\n            {difficulty.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <br></br>\r\n      <label htmlFor=\"eras\">Select eras:</label>\r\n      <select name=\"eras\" id=\"eras\" multiple onChange={handleEraChange}>\r\n        {eras.map(era => (\r\n          <option key={era.id} value={era.id}>\r\n            {era.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <br></br>\r\n      <button onClick={handleNewQuestion}>Get a new question</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\chris\\Documents\\DjangoProjects\\Projects\\Triviolivia\\frontend\\src\\reportWebVitals.js",[],[],{"ruleId":"20","severity":1,"message":"21","line":49,"column":13,"nodeType":"22","messageId":"23","endLine":49,"endColumn":25},"no-unused-vars","'selectedEras' is assigned a value but never used.","Identifier","unusedVar"]